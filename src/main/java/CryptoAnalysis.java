import org.apache.commons.math3.distribution.NormalDistribution;

import java.util.List;

/**
 * Created by pyshankov on 16.05.2016.
 */
public class CryptoAnalysis {
    private static final double P1 = 0.25;
    private static final double P2 = 0.5;
    public static double ta001=2.326;
    public static double tb230=6.0093;
    public static double tb231=6.12;

     private static String zi


    private static final NormalDistribution normalDistribution = new NormalDistribution(0, 1);
//
//    public static int countCoincidingBits(LinearFeedbackShiftRegister l, int[] outputBits) {
//        int count = 0;
//        for (int i = 0; i < outputBits.length; i++) {
//            count += outputBits[i] ^ l.generateNextSequence();
//        }
//        return count;
//    }
//
//    public static int R(LinearFeedbackShiftRegister l1,int[] src){
//        int res = 0;
//        for(int i = 0 ; i < src.length ; i++)
//            res+=(l1.generateNextSequence()^src[i]);
//        return res;
//    }
//
//    public static List<int[]> firstState(Polynom polynom,int[] src,double ta,double tb){
//
//
//        int N = (int) N(ta,tb);
//        double C = C(tb,N);
//
//        System.out.println(C);
//        System.out.println(N);
//
//
//
//        return null;
//    }


    public static double N(double ta,double tb){
        return 3*ta*ta+4*tb*tb+4*1.73*ta*tb;
    }

    public static double C(double tb,int N){
        return 0.5*(N-tb*Math.sqrt(N));
    }

    public double C(int N,double p1,double t1){
        return N*p1+t1*Math.sqrt(N*p1*(1-p1));
    }

}



