

import java.io.FileWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

import static java.lang.Math.pow;
import static java.lang.Math.sqrt;

/**
 * Created by pyshankov on 16.05.2016.
 */
public class CryptoAnalysis {

    private static ExecutorService executorService = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors()+1);

    private static final double P1 = 0.25;
    private static final double P2 = 0.5;
    private static final double alpha = 0.01;

    private static double tb230=6.0093535655;
    private static double tb231=6.120756286;

//    private static double tb225 = 5.4199831749;
//    private static double tb226= 5.5425940578;

    public static String zi
//        public static String zi


    public static long[] fromStringToMass(String s){
        long[] z = new long[s.length()];
               for (int i = 0 ; i < z.length ; i++){
                        z[i] = Integer.parseInt(zi.substring(i,i+1));
                   }
        return z;
    }

    public static long R(LinearFeedbackShiftRegister l,long[] src){
    return  Arrays.stream(src).reduce(0,(x,y)->x+(y^l.generateNext()));
    }

    public  static List<Long> firstStates(long polynom,String s,double b){

        long degree= 63-Long.numberOfLeadingZeros(polynom);
        long numberOnElementsInField = 1 << degree ;
        double betta = 1.0/numberOnElementsInField;

        double tAlpha = 2.326347874;
        double tBetta = b;


        System.out.println("b "+tBetta);
        double a1 = tAlpha * Math.sqrt(P1 * (1 - P1));
        double a2 = tBetta * Math.sqrt(P2 * (1 - P2));

        int N = new BigDecimal(pow((a1 + a2) / (P2 - P1), 2)).setScale(0, RoundingMode.UP).intValue();
        new BigDecimal(N * P1 + sqrt(N) * a1).setScale(0, RoundingMode.UP).intValue();
        double C = new BigDecimal(N * P1 + sqrt(N) * a1).setScale(0, RoundingMode.UP).intValue();

        System.out.println("N*"+ N);
        System.out.println("C "+C);

        long[] z = new long[N];
        System.arraycopy(fromStringToMass(s),0,z,0,z.length-1);

        List<Long> res = new ArrayList<>();

        for (long i = 0 ; i < numberOnElementsInField ; i ++){
            LinearFeedbackShiftRegister l = new LinearFeedbackShiftRegister(polynom,i);
            long R = R(l,z);
            if(R<=C) res.add(i);
        }
        return res;
    }

    public static void breakGeffe(long p1,long p2,long p3,String s) throws Exception{

         Callable<List<Long>> L1StatesTask = ()-> CryptoAnalysis.firstStates(p1,CryptoAnalysis.zi,tb230);
         Callable<List<Long>> L2StatesTask = ()-> CryptoAnalysis.firstStates(p2,CryptoAnalysis.zi,tb231);

        long degree= 63-Long.numberOfLeadingZeros(p3);
        long numberOnElementsInField = 1 << degree ;

        long[] z = new long[s.length()];
        System.arraycopy(fromStringToMass(s),0,z,0,z.length-1);

        Future<List<Long>> future1 = executorService.submit(L1StatesTask);
        Future<List<Long>> future2 = executorService.submit(L2StatesTask);

        executorService.shutdown();

        long t = System.currentTimeMillis();
        List<Long> l1Res = future1.get();
        List<Long> l2Res = future2.get();
        System.out.println(System.currentTimeMillis()-t);

        System.out.println(l1Res.size());
        System.out.println(l2Res.size());

        for (Long l1 : l1Res){
            LinearFeedbackShiftRegister L1 = new LinearFeedbackShiftRegister(p1,l1);
            for (Long l2 : l2Res){
                LinearFeedbackShiftRegister L2 = new LinearFeedbackShiftRegister(p2,l2);
                for (long i = 0 ; i < numberOnElementsInField ; i++){
                    L1.reset();
                    L2.reset();
                    LinearFeedbackShiftRegister L3 = new LinearFeedbackShiftRegister(p3,i);
                    LinearFeedbackShiftRegister.GeffeGen geffeGen = new LinearFeedbackShiftRegister.GeffeGen(L1,L2,L3);
                    boolean d = true;
                    for(int j = 0 ; j < z.length ; j++){
                        if(z[j]!=geffeGen.getNext()){
                            d=false;
                            break;
                        }
                    }
                    if(d) {
                        try (FileWriter fw = new FileWriter("res_hard.txt")) {
                            fw.write(L1.getFirstState() + "\n");
                            fw.write(L2.getFirstState() + "\n");
                            fw.write(L3.getFirstState() + "\n");

                            fw.write(L1.getCurrentState() + "\n");
                            fw.write(L2.getCurrentState() + "\n");
                            fw.write(L3.getCurrentState() + "\n");
                        } catch (IOException e) {
                        }
                    }

                }
            }

        }
        executorService.shutdown();
    }

}



